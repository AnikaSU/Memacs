#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Time-stamp: <2011-10-26 15:13:31 awieser>

import codecs
import sys
import time

INVOCATION_TIME = time.strftime(u"%Y-%m-%dT%H:%M:%S", time.gmtime())

class OrgOutputWriter:
    __handler = None
    
    def __init__(self,short_description, tag, file_name=None):
        """
        @param file_name:  
        """
        if file_name != None:            
            self.__handler = codecs.open(file_name, 'w', u"utf-8")
        self.__time = time.time()
        self.short_description = short_description
        self.tag = tag
        self.__write_header()
        
    def write(self, output):
        """
        Write "<output>"
        """
        if self.__handler:
            self.__handler.write(unicode(output))
        else:
            print output, # don't remove the comma(otherwise there will be a \n)
    
    def writeln(self, output):
        """
        Write "<output>\n"   
        """
        self.write(unicode(output) + u"\n")    
    
    def __write_header(self):
        """
        Writes the header of the file
        
        Don't call this function - call instead function close(),
        __init__() does call this function
        """
        self.write_commentln(u"-*- coding: utf-8 -*-")
        self.write_commentln(u"this file is generated by " + sys.argv[0] + \
                     ". Any modifications will be overwritten upon next invocation!")
        self.write_org_item(self.short_description + "        :Memacs:"+self.tag+":")
    
    def __write_footer(self):
        """
        Writes the footer of the file including calling python script and time
        
        Don't call this function - call instead function close(),
        close() does call this function 
        """
        self.writeln(u"* successfully parsed by " + \
                     sys.argv[0] + u" at " + INVOCATION_TIME \
                     + u" in " + self.__time + u".\n\n")
    
    def write_comment(self, output):
        """
        Write output as comment: "## <output>" 
        """
        self.write(u"## " + output)
        
    def write_commentln(self, output):
        """
        Write output line as comment: "## <output>\n" 
        """
        self.write_comment(output + u"\n")
    
    def write_org_item(self,output):
        """
        Writes an org item line.
        
        i.e: * <output>\n
        """
        self.writeln("* " + output)
    
    def write_org_subitem(self,output):    
        """
        Writes an org item line.
        
        i.e: * <output>\n
        """
        self.writeln("** " + output)
    
    def close(self):
        """
        Writes the footer and closes the file
        """
        self.__time = "%1fs " % (time.time() - self.__time)
        self.__write_footer()
        if self.__handler != None:
            self.__handler.close()
        
